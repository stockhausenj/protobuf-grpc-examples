# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from dns.v1 import dns_pb2 as dns_dot_v1_dot_dns__pb2


class DnsServiceStub(object):
    """Service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateRootNameserver = channel.unary_unary(
                '/dns_service.DnsService/CreateRootNameserver',
                request_serializer=dns_dot_v1_dot_dns__pb2.CreateRootNameserverRequest.SerializeToString,
                response_deserializer=dns_dot_v1_dot_dns__pb2.CreateRootNameserverResponse.FromString,
                _registered_method=True)
        self.GetRootNameserver = channel.unary_unary(
                '/dns_service.DnsService/GetRootNameserver',
                request_serializer=dns_dot_v1_dot_dns__pb2.GetRootNameserverRequest.SerializeToString,
                response_deserializer=dns_dot_v1_dot_dns__pb2.RootNameserver.FromString,
                _registered_method=True)
        self.UpdateRootNameserver = channel.unary_unary(
                '/dns_service.DnsService/UpdateRootNameserver',
                request_serializer=dns_dot_v1_dot_dns__pb2.UpdateRootNameserverRequest.SerializeToString,
                response_deserializer=dns_dot_v1_dot_dns__pb2.UpdateRootNameserverResponse.FromString,
                _registered_method=True)
        self.DeleteRootNameserver = channel.unary_unary(
                '/dns_service.DnsService/DeleteRootNameserver',
                request_serializer=dns_dot_v1_dot_dns__pb2.DeleteRootNameserverRequest.SerializeToString,
                response_deserializer=dns_dot_v1_dot_dns__pb2.DeleteRootNameserverResponse.FromString,
                _registered_method=True)
        self.DnsLookup = channel.unary_unary(
                '/dns_service.DnsService/DnsLookup',
                request_serializer=dns_dot_v1_dot_dns__pb2.DnsLookupRequest.SerializeToString,
                response_deserializer=dns_dot_v1_dot_dns__pb2.DnsLookupResponse.FromString,
                _registered_method=True)


class DnsServiceServicer(object):
    """Service definition
    """

    def CreateRootNameserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetRootNameserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateRootNameserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRootNameserver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DnsLookup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DnsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateRootNameserver': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateRootNameserver,
                    request_deserializer=dns_dot_v1_dot_dns__pb2.CreateRootNameserverRequest.FromString,
                    response_serializer=dns_dot_v1_dot_dns__pb2.CreateRootNameserverResponse.SerializeToString,
            ),
            'GetRootNameserver': grpc.unary_unary_rpc_method_handler(
                    servicer.GetRootNameserver,
                    request_deserializer=dns_dot_v1_dot_dns__pb2.GetRootNameserverRequest.FromString,
                    response_serializer=dns_dot_v1_dot_dns__pb2.RootNameserver.SerializeToString,
            ),
            'UpdateRootNameserver': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateRootNameserver,
                    request_deserializer=dns_dot_v1_dot_dns__pb2.UpdateRootNameserverRequest.FromString,
                    response_serializer=dns_dot_v1_dot_dns__pb2.UpdateRootNameserverResponse.SerializeToString,
            ),
            'DeleteRootNameserver': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRootNameserver,
                    request_deserializer=dns_dot_v1_dot_dns__pb2.DeleteRootNameserverRequest.FromString,
                    response_serializer=dns_dot_v1_dot_dns__pb2.DeleteRootNameserverResponse.SerializeToString,
            ),
            'DnsLookup': grpc.unary_unary_rpc_method_handler(
                    servicer.DnsLookup,
                    request_deserializer=dns_dot_v1_dot_dns__pb2.DnsLookupRequest.FromString,
                    response_serializer=dns_dot_v1_dot_dns__pb2.DnsLookupResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dns_service.DnsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('dns_service.DnsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DnsService(object):
    """Service definition
    """

    @staticmethod
    def CreateRootNameserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dns_service.DnsService/CreateRootNameserver',
            dns_dot_v1_dot_dns__pb2.CreateRootNameserverRequest.SerializeToString,
            dns_dot_v1_dot_dns__pb2.CreateRootNameserverResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetRootNameserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dns_service.DnsService/GetRootNameserver',
            dns_dot_v1_dot_dns__pb2.GetRootNameserverRequest.SerializeToString,
            dns_dot_v1_dot_dns__pb2.RootNameserver.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateRootNameserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dns_service.DnsService/UpdateRootNameserver',
            dns_dot_v1_dot_dns__pb2.UpdateRootNameserverRequest.SerializeToString,
            dns_dot_v1_dot_dns__pb2.UpdateRootNameserverResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteRootNameserver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dns_service.DnsService/DeleteRootNameserver',
            dns_dot_v1_dot_dns__pb2.DeleteRootNameserverRequest.SerializeToString,
            dns_dot_v1_dot_dns__pb2.DeleteRootNameserverResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DnsLookup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/dns_service.DnsService/DnsLookup',
            dns_dot_v1_dot_dns__pb2.DnsLookupRequest.SerializeToString,
            dns_dot_v1_dot_dns__pb2.DnsLookupResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
